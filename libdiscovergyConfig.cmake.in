# -*- mode: cmake; -*-
# libdiscovergyConfig.cmake is generated by CMake from libdiscovergy/libdiscovergyConfig.cmake.in

# set the libdiscovergy version number
set(@UPPER_PROJECT_NAME@_VERSION_MAJOR @V_MAJOR@)
set(@UPPER_PROJECT_NAME@_VERSION_MINOR @V_MINOR@)
set(@UPPER_PROJECT_NAME@_VERSION_PATCH @V_PATCH@)
set(@UPPER_PROJECT_NAME@_VERSION "${@UPPER_PROJECT_NAME@_VERSION_MAJOR}.${@UPPER_PROJECT_NAME@_VERSION_MINOR}.${@UPPER_PROJECT_NAME@_VERSION_PATCH}")

# set the directories
if(NOT @UPPER_PROJECT_NAME@_INSTALL_DIR)
  set(@UPPER_PROJECT_NAME@_INSTALL_DIR "@CMAKE_INSTALL_PREFIX@")
endif(NOT @UPPER_PROJECT_NAME@_INSTALL_DIR)

get_filename_component(_currentDir "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_libdiscovergy_base_dir "${_currentDir}" PATH)
get_filename_component(_libdiscovergy_base_dir "${_libdiscovergy_base_dir}" PATH)

set(@UPPER_PROJECT_NAME@_INCLUDE_DIR  "${_libdiscovergy_base_dir}/include")
set(@UPPER_PROJECT_NAME@_INCLUDE_DIRS "${LIBDISCOVERGY_INCLUDE_DIR}" "@CMAKE_DIR@"
                    "@CURL_INCLUDE_DIR@" "@JSONCPP_INCLUDE_DIR@" "@OPENSSL_INCLUDE_DIR@")
set(@UPPER_PROJECT_NAME@_LIB_DIR      "@CMAKE_LIB_DIR@")
set(@UPPER_PROJECT_NAME@_LIBRARIES    "@CURL_LIBRARIES@"
  "@JSONCPP_LIBRARY@"
  "@OPENSSL_CRYPTO_LIBRARY@"
)
set(@UPPER_PROJECT_NAME@_CONFIG_DIR   "@CMAKE_CONFIG_DIR@")

# the exports file exports
set(@UPPER_PROJECT_NAME@_TARGET_PREFIX @LIBLIBKLIO_TARGET_PREFIX@)

# configuration settings

# Make sure to load the exported targets only once
# For the rest of this script it doesn't matter that much
if(NOT TARGET libdiscovergy__kresources)
  get_filename_component(_currentDir "${CMAKE_CURRENT_LIST_FILE}" PATH)
  include("${_currentDir}/@PROJECT_NAME@Targets.cmake")
endif(NOT TARGET libdiscovergy__kresources)

# EOF

